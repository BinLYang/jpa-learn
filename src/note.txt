JPA是一种规范，本例用Hibernate来实现。相当于是Hibernate的变种
使用JPA持久化对象的步骤
	1.创建persistence.xml，在这个文件中配置持久化单元
		-需要指定跟那个数据库进行交互
		-需要指定JPA使用哪个持久化的框架以及配置该框架的基本属性
	2.创建实体类，使用annotation来描述实体类跟数据库表之间的映射关系
	3.使用JPA API完成数据的增、删、改、查
		-创建EntityManagerFactory(对应Hibernate中的SessionFactory)
		-创建EntityManager(对应Hibernate中的Session)
		
基于注解的 6个基本注解 @Entity @Table @Column @Id @Basic（默认） @GeneratedValue 添加在getXXX()方法上
	其中@Trasient表示该属性并非一个映射到数据库的字段
	@Temporal针对Date 类型的字段
	
JPA相关接口、类
	Persistence类用于获取EntityManagerFactory实例。该类包含一个名为createEntityManagerFactory的静态方法
	EntityManagerFactory接口主要用来创建EntityManager实例：主要以下4个方法
		-createEntityManager():用于创建实体管理器对象
		-createEntityManager(Map map):Map参数用于提供EntityManager的属性
		-isOpen():检查EntityManagerFactory是否处于打开状态
		-close():关闭EntityManagerFactory
		
		merge(T entity):merge()方法用于处理Entity的同步，即数据库的插入和更新操作
			-详见于 com.kinghorse.test.JPATest 测试类
	EntityTransaction 不同于hibernate 必须先获取到  才能begin
	
	Update操作：EntityManager.find()获取实例，更改对应的属性set方法  EntityTransaction.commit()即可
	
	单向n-1 和单向1-n是相对的
		单向1-n关联关系执行保存时，一定会多出update语句，因为n的一端在插入数据时不会同时插入外键列；默认懒加载模式@OneToMany(fetch=FetchType.EAGER)改为实时加载
		执行删除操作remove()操作时 会把 n的一方的外键值 置null 再删除 1 的一端数据@OneToMany(cascade={CascadeType.REMOVE},fetch=FetchType.EAGER)来级联删除
		
	双向1-n
		执行保存时，若先保存 n的一端，在保存1 的一端，默认情况下，会多出4条update语句。两边都维护关联关系的原因
		在进行双向 1-n关联关系时，建议用n的一方来维护关联关系，而1的一方不维护关联关系，这样会减少SQL语句通过OneToMany(mapperBy="customer")并且不定义@JoinColumn
		
	双向1-1
	
	
二级缓存：
	persistence.xml中进行配置	
		对应的Entity 上添加@Cacheable(true)
		
JPQL
	关联查询  LEFT OUT JOIN FETCH 
		
		